section	.text ; the code goes here
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
	;move the data from memory to registers
	mov eax, [num1]
	mov ebx, [num2]
	mov ecx, [num3]
	;add the data
	add eax, ebx
	add eax, ecx
	add eax, '0' ; converts from number to ASCII value of number
	mov [result], eax ; storing result back into result variable
	;automatically stored into whicever register comes first- thus reg a
	
	;print message
	mov	edx, len    ;message length
	mov	ecx, msg    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	;print numerical result
	
	mov	edx, 1    ;message length
	mov	ecx, result    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	
	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

section	.data  ; constant values go here



msg	db	'The sum is ',0xa	;our dear string
len	equ	$ - msg			;length of our dear string
num1 db 3
num2 db 4
num3 db 2

section .bss ; variables where we don't know th evalue
result resb 1
; resb is reserve byte the 1 is saving one byte of memory
